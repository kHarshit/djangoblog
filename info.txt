The model(M) is a model or representation of your data. It’s not the actual data, but an interface to the data.
The model allows you to pull data from your database without knowing the intricacies of the underlying database.
The model usually also provides an abstraction layer with your database, so that you can use the same model
with multiple databases.

The controller(C) controls the flow of information between the model and the view. It uses programmed logic to
decide what information is pulled from the database via the model and what information is passed to the view.
It also gets information from the user via the view and implements business logic: either by changing the view,
or modifying data through the model, or both.

The view(V) is what you see. It’s the presentation layer for your model. On your computer, the view is what you see
in the browser for a Web app, or the UI for a desktop app. The view also provides an interface to collect user input.

Django is often referred to as an MTV framework. This is probably the only unfortunate bit of naming in Django,
because Django’s view is more like the controller in MVC, and MVC’s view is actually a Template in Django


#### views.py #####

A view is a “type” of Web page in your Django application that generally serves a specific function and has a
specific template.
we don’t do anything with request, but it must be the first parameter of the view nonetheless.
a view is just a Python function that takes an HttpRequest as its first parameter and returns an instance of HttpResponse.

To hook a view function to a particular URL with Django, we use a URLconf. A URLconf is like a table of contents for
your Django-powered Web site. Basically, it’s a mapping between URLs and the view functions that should be called for
those URLs. It’s how you tell Django, “For this URL, call this code, and for that URL, call that code.”

e.g. when somebody visits the URL /foo/, call the view function foo_view(), which lives in the Python module views.py

The first line imports two functions from the django.conf.urls module: include which allows you to include a full
Python import path to another URLconf module, and url which uses a regular expression to pattern match the URL in
your browser to a module in your Django project.

You should always use include() when you include other URL patterns. admin.site.urls is the only exception to this.
The idea behind include() is to make it easy to plug-and-play URLs. Since polls are in their own URLconf (polls/urls.py)

To keep the mysite/urls.py file clean, so we will import URLs from our blog application to the main mysite/urls.py file.
Django will now redirect everything that comes into 'http://127.0.0.1:8000/' to blog.urls and look for further
instructions there.

we're now assigning a view called post_list to the ^$ URL. This regular expression will match ^ (a beginning) followed
by $ (an end) – so only an empty string will match. That's correct, because in Django URL resolvers,
'http://127.0.0.1:8000/' is not a part of the URL. This pattern will tell Django that views.post_list is the right
place to go if someone enters your website at the 'http://127.0.0.1:8000/' address.
The last part, name='post_list', is the name of the URL that will be used to identify the view.

At this point, our URLconf defines only a single URLpattern: the one that handles requests to the URL /hello/.
What happens when you request a different URL? To find out, try running the Django development server and visiting a
page such as http://127.0.0.1:8000/goodbye/. You should see a “Page not found” message. Django displays this message
because you requested a URL that’s not defined in your URLconf.

When you run python manage.py runserver, the script looks for a file called settings.py in the inner mysite directory.
This file contains all sorts of configuration for this particular Django project. The most important setting is called
ROOT_URLCONF, which tells Django which Python module should be used as the URLconf for this Web site.:
ROOT_URLCONF = 'mysite.urls'
This corresponds to the file mysite/urls.py. When a request comes in for a particular URL – say, a request for /hello/
– Django loads the URLconf pointed to by the ROOT_URLCONF setting. Then it checks each of the URLpatterns in that
URLconf, in order, comparing the requested URL with the patterns one at a time, until it finds one that matches.
When it finds one that matches, it calls the view function associated with that pattern, passing it an HttpRequest
object as the first parameter; a view function must return an HttpResponse.
Once it does this, Django does the rest, converting the Python object to a proper Web response with the appropriate
HTTP headers and body (i.e., the content of the Web page).

Each view is responsible for doing one of two things: returning an HttpResponse object containing the content for the
requested page, or raising an exception such as Http404. The rest is up to you.
Your view can read records from a database, or not. It can use a template system such as Django’s – or a third-party
Python template system – or not. It can generate a PDF file, output XML, create a ZIP file on the fly, anything you
want, using whatever Python libraries you want.
All Django wants is that HttpResponse. Or an exception.

^post/(\d+)/$
^ for the beginning of the text
$ for the end of the text
\d for a digit
+ to indicate that the previous item should be repeated at least once
() to capture part of the pattern


#### templates ####

Now we might be able to get away with putting our templates directly in polls/templates (rather than creating another
blog subdirectory), but it would actually be a bad idea. Django will choose the first template it finds whose name
matches, and if you had a template with the same name in a different application, Django would be unable to distinguish
between them. We need to be able to point Django at the right one, and the easiest way to ensure this is by namespacing
them. That is, by putting those templates inside another directory named for the application itself.

It’s a very common idiom to load a template, fill a context and return an HttpResponse object with the result of the
rendered template. Django provides a shortcut render(). It takes the request object as its first argument, a template
name as its second argument and a dictionary as its optional third argument. It returns an HttpResponse object of the
given template rendered with the given context.
The get_object_or_404() function takes a Django model as its first argument and an arbitrary number of keyword
arguments, which it passes to the get() function of the model’s manager. It raises Http404 if the object doesn’t exist.

The template system uses dot-lookup syntax to access variable attributes. In the example {{ post.text }}, first Django
does a dictionary lookup on the object post. Failing that, it tries an attribute lookup – which works, in this case.
If attribute lookup had failed, it would’ve tried a list-index lookup.
Everything you put between {% for %} and {% endfor %} will be repeated for each object in the list. We are accessing
data in each of the fields defined in our Post model. Also, the |linebreaksbr is piping the posts' text through a
filter to convert line-breaks into paragraphs.

Another nice thing Django has for you is template extending. It means that you can use the same parts of your HTML for
different pages of your website. Templates help when you want to use the same information or layout in more than one
place. You don't have to repeat yourself in every file. And if you want to change something, you don't have to do it
in every template, just one!
A base template is the most basic template that you extend on every page of your website.
You used the template tag {% block %} to make an area that will have HTML inserted in it. That HTML will come from
another template that extends this template (base.html)


#### database ####

ENGINE tells Django which database engine to use. As we are using SQLite in the examples in this book, we will leave
it to the default django.db.backends.sqlite3. Or we can use django.db.backends.postgresql
NAME – The name of your database. If you’re using SQLite, the database will be a file on your computer; in that case,
NAME should be the full absolute path, including filename, of that file. The default value, os.path.join(BASE_DIR,
'db.sqlite3'), will store the file in your project directory.


#### models ####

A model is the single, definitive source of truth about your data. It contains the essential fields and behaviors
of the data you’re storing. A Django model is a description of the data in your database, represented as Python code.
It’s your data layout – the equivalent of your SQL CREATE TABLE statements – except it’s in Python instead of SQL,
and it includes more than just database column definitions.

The name of each Field instance (e.g. author or pub_date) is the field’s name, in machine-friendly format.
You’ll use this value in your Python code, and your database will use it as the column name.

Finally, note a relationship is defined, using ForeignKey. That tells Django each Post is related to a
single User. Django supports all the common database relationships: many-to-one, many-to-many, and one-to-one.

Each field type, except for ForeignKey, ManyToManyField and OneToOneField, takes an optional first positional argument
– a verbose name. If the verbose name isn’t given, Django will automatically create it using the field’s attribute name,
converting underscores to spaces, and capitalizing the first character.
e.g. first_name = models.CharField("person's first name", max_length=30)

If you’re interested, you can also run $python manage.py check; this checks for any problems in your project
without making migrations or touching the database.
By running makemigrations, you’re telling Django that you’ve made some changes to your models (in this case,
you’ve made new ones) and that you’d like the changes to be stored as a migration.
Migrations are how Django stores changes to your models (and thus your database schema) - they’re just files on disk.
You can read the migration for your new model if you like; it’s the file blog/migrations/0001_initial.py
The migrate command takes all the migrations that haven’t been applied (Django tracks which ones are applied using a
special table in your database called django_migrations) and runs them against your database - essentially,
synchronizing the changes you made to your models with the schema in the database.

Change your models (in models.py).
Run python manage.py makemigrations to create migrations for those changes
Run python manage.py migrate to apply those changes to the database.

NULL: If True, Django will store empty values as NULL in the database. Default is False.

null is purely database-related, whereas blank is validation-related.
If a field has blank=True, form validation will allow entry of an empty value

In the choices list: The first element in each tuple is the value that will be stored in the database. The second
element will be displayed by the default form widget or in a ModelChoiceField.


class Meta:
    ordering = ['name']
If you specify this, it tells Django that unless an ordering is given explicitly with order_by(), all Post
objects should be ordered by the name field whenever they’re retrieved with the Django database API.


#### admin ####

we need to tell the admin that Post objects have an admin interface, so register your models there.

# make changes locally, push those changes to GitHub, and pull your changes down to your live Web server.
# This allows you to work and experiment without breaking your live Web site.

When Django loads at server startup, it runs the admin.autodiscover() function. This function iterates over your
INSTALLED_APPS setting and looks for a file called admin.py in each installed app. If an admin.py exists in a given
app, it executes the code in that file. In the admin.py in blog app, each call to admin.site.register() simply
registers the given model with the admin. The admin site will only display an edit/change interface for models that
have been explicitly registered.
The app django.contrib.auth includes its own admin.py, which is why Users and Groups showed up automatically in the
admin. Other django.contrib apps, such as django.contrib.redirects, also add themselves to the admin, as do many
third-party Django applications you might download from the Web.Beyond that, the Django admin site is just a Django
application, with its own models, templates, views and URLpatterns. You add it to your application by hooking it into
your URLconf, just as you hook in your own views. You can inspect its templates, views and URLpatterns by poking around
in django/contrib/admin in your copy of the Django codebase



